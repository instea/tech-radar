[{"name":"Docker","ring":"ADOPT","quadrant":"Infrastructure and platforms","isNew":"TRUE","description":"Docker is very usefull for local development (e.g. to run DB). <br><br>For a production there are already two possibilities - run applications in Docker or write applications in Serverless fashion (they can also co-exists). Apart obvious pros and cons, the decision factor shall be price. For steady load, &quot;standard&quot; dockerized applications are cheaper and there are no &quot;hidden&quot; costs like using secrets. Also resource utilization (CPU/memory) is typically better (two lambda functions does not share the memory) again leading to better runtime costs.<br><br>Pros: Predicable - same environment everywhere, Predicable runtime costs, Better developer experience<br>Cons: Less scalable than serverless, Harder operations/maintanance"},{"name":"React","ring":"ADOPT","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Každý frontend developer vo firme má znalosti React.<br>Dôvody prečo nepoužiť React môžu byť napríklad výkon a veľkosť balíka, kde dobrá náhrada môže byť Svelte.<br>Dôvody, prečo nepouzit React, sú, keď potrebujem čistý ľahký minimálny kód.<br>SolidJS je akoby React so signálmi, to je to, čo Reactu chýba oproti novým ostatným hráčom a vyzerá to tak, že to ani nechcú adoptovať.<br>Qwik je ďalšia možná alternatíva z hľadiska faktora výkonu.<br><br>Výhody: najpoužívanejšia UI knižnica, komunita, rýchlosť, rozšírenosť vo firme Nevýhody: malou nevýhodou je, že veľa riešení je potrebné dokódiť, existujú frameworky s riešeniami, z pohľadu rýchlosti sú k dispozícií iné možnosti"},{"name":"PostgreSQL","ring":"ADOPT","quadrant":"Data","isNew":"TRUE","description":"Well known and used relation database. <br>With relation data PostgreSQL is mostly right choice.<br>Has tons of extensions and big community behind.<br><br>Cons: Scalability can be problem<br>Pros: Transactions, relations, joins"},{"name":"Mongo","ring":"TRIAL","quadrant":"Data","isNew":"TRUE","description":"Most popular NoSQL database.<br>Make sense to use this database when data is in document structure and have only few relations.<br><br>Pros: Scalability, speed<br>Cons: No relations and Joins, has no guarantees of atomicity, consistency, isolation, or durability."},{"name":"Kubernetes","ring":"TRIAL","quadrant":"Infrastructure and platforms","isNew":"TRUE","description":"Vhodny pre robustné aplikácie s veľkým počtom mikroslužieb.<br>Umožnuje jednoduchú škálovatelnosť, service discovery, self-healing...<br>Je možné využiť manažovaný alebo self-hosted. Preferujeme manažovaný Kubernetes.<br><br>Pre menšie aplikácie môže byť vhodná alternatíva Docker Swarm. <br>Docker Swarm je jednoduchší, avšak podporuje menej pokročilých funkcií (eg. audit log, pod security policies, advanced scheduling - node affinity, ...)<br><br>Výhody: Široko používaný (dokumentácia, podpora cloud providerov, tooling ...), robustný, rozšíriteľný (CRD, nástroje tretích strán - eg. Kyverno pre pod security, ...) <br>Nevýhody: komplexita, overkill pre jednoduché aplikácie"},{"name":"Tailwind","ring":"ASSESS","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Tailwind poskytuje utility CSS classy pre jednodušší vývoj &quot;pixel-perfect&quot; aplikácií. <br>Výhodou je flexibilita pri návrhu dizajnu, nevynucuje špecifický štýl, ale poskytuje utility classy pre vlastné naštýlovanie kompotentov.<br>Pre konzistentný dizajn je vhodné používať s komponentovou knižnicou.<br><br>Výhody: <br>Nevýhody: "},{"name":"AWS","ring":"ADOPT","quadrant":"Infrastructure and platforms","isNew":"TRUE","description":"We have picked AWS as a industry standard for running applications in a cloud. And since we have biggest experience with it, we stick to it. However it might not be good enough for special needs like AI.<br><br>Pros: Proven cloud provider<br>Cons: AI services are not that rich as in case of Azure or Google."},{"name":"Vite","ring":"ADOPT","quadrant":"Tools and techniques","isNew":"TRUE","description":"Vite.js is a modern, fast, and efficient build tool and dev server. It’s ideal for non-server-rendered apps, supports ES6, JSX, TypeScript, CSS preprocessors, and other frameworks like Vue. It’s not optimal for server rendering.<br><br>Pros:<br>- Fast and efficient, compiles and reloads only changed code<br>- Pre-bundles dependencies using esbuild<br>- Pre-configured Rollup build<br><br>Cons:<br>- Old browsers dont support its features<br>- Integration require significant changes<br>- Does not do type checking"},{"name":"Typescript","ring":"ADOPT","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"TypeScript brings (optional) type safety to the codebase. While JavaScript might be a good choice for prototypes and small projects, in general TypeScript scales better for medium to large projects with multiple people working on them. Since it requires transpilation step, setup could get more complicated and might collide with other libraries (e.g. we experienced issues while setting up TS for serverless).<br><br>Pros: Type safety, Tooling - auto-completion, refactoring, code navigation, ...<br>Cons: More complicated setup, Increased code verbosity"},{"name":"Java","ring":"ADOPT","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Java is a robust technology of choice, especially when performance and robustness are key, making it a preferred choice for large-scale projects that require high levels of stability and scalability.<br>Kotlin is the successor to Java, introducing a number of modern features while maintaining interoperability with existing Java codebases.<br>Node.js is favoured for projects where rapid development is a priority, providing a lightweight and efficient environment.<br>The choice depends on the team.<br><br>Pros: performance, features such as transaction handling, metrics, actuator, proven for large-scale applications, strong community support<br>Cons: development speed, memory consumption, lack of features in older versions, null safety"},{"name":"Serverless","ring":"ADOPT","quadrant":"Infrastructure and platforms","isNew":"TRUE","description":"Serverless (and mainly lambda functions) are alternative (and sometimes complimentary) approach to standard server based architecture.<br><br>Development is typically more complicated. Although frameworks like Serverless.com allows you certain level of vendor independence, at least some parts are bound to specific platform.<br><br>See Docker for more details about pros and cons. Things like memory leaks affects only one lambda but at the cost of worse memory/cpu utilization due to isolation.<br><br>Pros: Scallable, easier DevOps<br>Cons: Worse DX, Pricing model is much more complex"},{"name":"apollo-graphql","ring":"ADOPT","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Good choice for basic application without any special requirements.<br>Can also be combined with REST.<br>It allows API client to choose schema of response.<br>API defines resolvers and queries.<br>Response is created as union of resolvers.<br><br>Pros: Flexibility for API client, data efficiency, data subscription model<br>Cons: Complexity(based on project), performance"},{"name":"next.js","ring":"TRIAL","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Vie bundlovať, servovať. Je to plnohodnotný framework.<br>V rámci Nextu môžeš bez problémov vytvoriť frontendovú aplikáciu postavenú na Reacte, ktorá má perfektnú podporu pre server-side rendering.<br>Next.js “out of the box” podporuje fullstack aplikácie, čím môžeš vytvoriť aplikáciu v Express a Next, ktorý je postavený na React s pár rozdielmi a je to všetko v rámci jedného bundle.<br>Pomocou rôznych funkcií umožňuje definovať, či sa renderuje na klientovi alebo na serveri.<br>Static Site Generation (SSG) a Edge Side Rendering (ESR) ako “killer” vlastnosti.<br>Výhodou je, že spolu s Next.js prichádza niečo ako router, basic routing.<br>Rýchlosť je ďalšou výhodou."},{"name":"redis","ring":"TRIAL","quadrant":"Data","isNew":"TRUE","description":"(Key, value) pair databaza, no dokaze ovela viac (datove struktury)<br>Redis nieje by default durable, je potrebne nastavit manualne. To znamena ze Redis negarantuje napr. uspesny zapis<br>Redis ako distribovana cache<br>Existtuje aj UI<br>Adapter pre skoro kazdy jazyk<br>Existuju aj pluginy<br><br>Redis streams<br><br>Prototyp na S&amp;B, vysledok ze je to rychlejsie ako napr. Kafka (skoro 10x)<br>No naopak Redis steams nema tolko funkcionality oproti Kafka, je potrebne ju dorobit manualne<br>Nie vzdy su Redis streams spolahlive<br><br>Alternatives:<br> - MemoryDb<br><br>Pros:<br> -<br><br>Cons:<br> -"},{"name":"jenkins","ring":"HOLD","quadrant":"Infrastructure and platforms","isNew":"TRUE","description":"Is DevOps tool. Is used for task automatization. Standalone technology with learning curve.<br>Is installed on bare metal manually. Is not coupled with repositories, this brings flexibility.<br>Uses plugin system for enhancing functionality, plugins are mainly created by community.<br><br>Alternatives:<br> - Github actions<br> - Gitlab ci<br><br>Pros:<br> - Pricing<br> - Repository flexibility<br><br>Cons:<br> - Complexity<br> - Versioning (e.g different Java versions for each Job)<br> - Plugin system (many times deprecated and not secure plugins)"},{"name":"gitlab/github CI","ring":"ADOPT","quadrant":"Infrastructure and platforms","isNew":"TRUE","description":"DevOps platform as a service. Is coupled with repository. Is based on plugin(action) system from community, but with some official.<br>In super specific and complex tasks can lack functionality. In general cases is easy to use. Works out of the box. <br><br>Alternatives:<br> - Jenkins<br><br>Pros:<br> - Easy to use<br> - No setup<br><br>Cons:<br> - Pricing (in terms of long runnign jobs)<br> - Coupled to repository"},{"name":"OpenAPI","ring":"ADOPT","quadrant":"Tools and techniques","isNew":"TRUE","description":"Zname ako aj Swagger<br>Specifikacia ktora popisuje resources v REST API<br><br>Specifikacia ktoru ma zmysel vytvarat ked vytvaram REST API<br>OpenAPI je mozne generovat aj z existujuceho API<br><br>Vytvarat najpv specifikaciu alebo kod?<br>Pre rozdelenie prace ma zmysel najprv vytvorit specifikaciu a potom kazdy sa on moze opierat a pracovat na svojej strane (FE/BE rozdelenie)<br>Pri mensich projektoch sa toto velmi nedeje, casto sa najprv implementuje kod<br><br>Nie vsetky jazyky vedia jednoducho generovat OpenAPI priamo z kodu<br><br>Alternatives:<br> - v rovnakom rozsahu asi neexistuje alternativa<br><br>Pros:<br> -<br><br>Cons:<br> -"},{"name":"Kafka","ring":"TRIAL","quadrant":"Data","isNew":"TRUE","description":"It is more streaming solution but can be used also as messaging (where it is quite flexible, e.g. combining queue and topics distribution patterns).<br><br>Messages have its own retention, thus it is possible to replay/look back on older messages (which is usefull for different streaming aggregation or just to be correct corrupted data by replaying older inputs).<br><br>It has very reliable and inherently fault tollerant. When properly configured (e.g. partitions), it is also very scallable. On the other hand it might be also more expensive (cost or resource wise) than simpler solutions. Although it is performant (throughput, ...), it has slight latency (~ tens of ms). <br><br>Alternatives:<br>- SQS<br>- RabbitMq<br>- Redis<br><br>Pros: reliable, fault-tolerant, scalable, pretty flexible<br>Cons: expensive"},{"name":"react-admin","ring":"TRIAL","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Sada componentov pre administracne rozhranie, len (FE)<br><br>Generuje kod, ktory je potom mozne rucne upravit<br>Funguje len pre REST API<br>Jednoducha a rychla integracia<br>Je potrebne implementovat interface medzi BE a FE pre spravne fungovanie<br>So spravnym API vie fungovat priamo out of the box<br>Rychla learning curve<br><br>S graphQL to nieje az tak out of the box, je potrebne vytvorit adapteri<br><br>Alternatives:<br> -<br><br>Pros:<br> -<br><br>Cons:<br> -"},{"name":"expo","ring":"TRIAL","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"&quot;Distribucia&quot; React Native (rozsirenie React Native)<br><br>Funguje nad React Native<br>Riesi problem s native dependencies<br>Zjednodusuje upgrade native dependencies<br><br>Over the air updates<br>Ponuka CI s ktorym je mozne vyvijat lokalne a multiplatformovo (IoS, Android)<br><br>Alternatives:<br> - React Native (vanila)<br><br>Pros:<br> -<br><br>Cons:<br> -"},{"name":"kotlin","ring":"ASSESS","quadrant":"Languages and Frameworks","isNew":"TRUE","description":"Komunita pomaly presedlava na Kotlin<br>Ludia su s nim spokojni<br><br>Chybaju skusenosti vo firme<br>Kotlin vie interagovat s existujucim Java kodom<br><br>Kotlin generuje rovnaky byte code ako Java<br><br>Alternatives:<br> - Java<br><br>Pros:<br> -<br><br>Cons:<br> -"}]